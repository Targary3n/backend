name: CI

on:
  push:
    branches:
      - main
      - prod
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
      - prod
  workflow_dispatch:
    inputs:
      deploy_now:
        description: 'Deploy Now (set to true to deploy)'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '17.8.0'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.16.1'

      - name: Install dependencies
        run: npm ci
        cache: npm 

      - name: Build project
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            yarn.lock

  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '17.8.0'

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install ESLint
        run: npm install eslint --save-dev

      - name: Run lint
        run: npm run lint

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run tests
        run: npm run test

  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_now == 'true' }}
    needs: [build, lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v1
        with:
          registry: registry.digitalocean.com/nomadiq
          username: ${{ secrets.DIGITALOCEAN_REGISTRY_USERNAME }}  # Assuming this is a secret
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: registry.digitalocean.com/nomadiq/my-app:latest

      - name: Decode SSH Key and Deploy to Droplet
        run: |
          # Start the SSH agent and export environment variables
          eval $(ssh-agent -s)
          
          # Add the SSH key to the agent
          echo "${{ secrets.DROPLET_SSH_KEY }}" | base64 --decode > $HOME/decoded_ssh_key
          chmod 600 $HOME/decoded_ssh_key
          ssh-add $HOME/decoded_ssh_key
          
          # List SSH keys to verify it's added correctly
          ssh-add -L
          
          # Execute SSH command to deploy
          ssh -o StrictHostKeyChecking=no -i $HOME/decoded_ssh_key ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }} << EOF
            docker login registry.digitalocean.com -u ${{ secrets.DIGITALOCEAN_REGISTRY_USERNAME }} --password-stdin <<< ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            docker pull registry.digitalocean.com/nomadiq/my-app:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --name my-app -p 80:80 registry.digitalocean.com/nomadiq/my-app:latest
          EOF
        shell: bash