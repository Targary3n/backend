name: Manual Deployment to Digital Ocean

on:
  workflow_dispatch:
    inputs:
      deploy_branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  deploy:
    needs: [build, lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v1
        with:
          registry: registry.digitalocean.com/nomadiq
          username: ${{ secrets.DIGITALOCEAN_REGISTRY_USERNAME }}  # Assuming this is a secret
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: registry.digitalocean.com/nomadiq/core-service:latest

      - name: Decode SSH Key and Deploy to Droplet
        run: |
          # Start the SSH agent and export environment variables
          eval $(ssh-agent -s)
          
          # Add the SSH key to the agent
          echo "${{ secrets.DROPLET_SSH_KEY }}" | base64 --decode > $HOME/decoded_ssh_key
          chmod 600 $HOME/decoded_ssh_key
          ssh-add $HOME/decoded_ssh_key
          
          # List SSH keys to verify it's added correctly
          ssh-add -L

          # Create the directory on the remote server
          ssh -o StrictHostKeyChecking=no -i $HOME/decoded_ssh_key ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }} "mkdir -p /home/nomadiq"

          # Execute SSH command to deploy
          ssh -o StrictHostKeyChecking=no -i $HOME/decoded_ssh_key ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }} << EOF
          docker login registry.digitalocean.com -u ${{ secrets.DIGITALOCEAN_REGISTRY_USERNAME }} --password-stdin <<< ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          docker pull registry.digitalocean.com/nomadiq/core-service:latest
          
          # Check if the container exists before attempting to stop or remove it
          if docker ps -a | grep -q core-service; then
            docker stop core-service
            docker rm core-service
          fi
          
          # Run the container with environment variables set directly
          docker run -d --name core-service -p 8080:3000 \
            -e ENVIRONMENT=dev \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e MONGODB_ROOT_USERNAME="${{ secrets.MONGODB_ROOT_USERNAME }}" \
            -e MONGODB_ROOT_PASSWORD="${{ secrets.MONGODB_ROOT_PASSWORD }}" \
            -e MONGODB_BIND_IP="${{ secrets.MONGODB_BIND_IP }}" \
            registry.digitalocean.com/nomadiq/core-service:latest
          EOF
        shell: bash